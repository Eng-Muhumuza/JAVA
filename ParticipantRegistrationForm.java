
package abbie.vu_exhibitions;

import javax.swing.*;
import java.sql.*;
import javax.swing.JTextField;
import java.awt.Image;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.BorderFactory;
import java.awt.Color;


public class ParticipantRegistrationForm extends javax.swing.JFrame {
private Connection connection;
    private final String DB_PATH = "C:\\Users\\abiam\\Desktop\\Registration.accdb";
    private String currentImagePath = null;
    JButton uploadButton;
    JLabel imaLabel;
    private JLabel lblImageDisplay;
    private JLabel imageLabel;

    public ParticipantRegistrationForm() {
        initComponents();
        connectToDatabase();
        setLocationRelativeTo(null);
        setVisible(true);
        imageLabel.setText("Image goes here");
        blImageDisplay = new JLabel();
blImageDisplay.setBounds(50, 50, 200, 200); // set position and size
blImageDisplay.setBorder(BorderFactory.createLineBorder(Color.BLACK));
add(blImageDisplay);

    }
     private void connectToDatabase() {
        try {
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            connection = DriverManager.getConnection("jdbc:ucanaccess://" + DB_PATH);
            System.out.println("Database Connected Successfully!");
        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(this, "Database Connection Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(1);
        }
     }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        blImageDisplay = new javax.swing.JLabel();
        btnImageUpload = new javax.swing.JButton();
        jRegistrationID = new javax.swing.JLabel();
        jName = new javax.swing.JLabel();
        txtRegistrationID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        jFaculty = new javax.swing.JLabel();
        txtFaculty = new javax.swing.JTextField();
        jProjectName = new javax.swing.JLabel();
        txtProjectName = new javax.swing.JTextField();
        jContact = new javax.swing.JLabel();
        txtContact = new javax.swing.JTextField();
        jEmai = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        btnExit = new javax.swing.JButton();
        btnRegister = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("VU-REGISTRATION");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(240, 10, 240, 29);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Participants", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        blImageDisplay.setBackground(new java.awt.Color(51, 51, 51));
        blImageDisplay.setForeground(new java.awt.Color(60, 63, 65));
        blImageDisplay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        blImageDisplay.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnImageUpload.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnImageUpload.setText("Upload Image");
        btnImageUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImageUploadActionPerformed(evt);
            }
        });

        jRegistrationID.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jRegistrationID.setText("Registration ID");

        jName.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jName.setText("Name");

        txtRegistrationID.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtRegistrationID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtRegistrationIDActionPerformed(evt);
            }
        });

        txtName.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        jFaculty.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jFaculty.setText("Faculty");

        txtFaculty.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtFaculty.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFacultyActionPerformed(evt);
            }
        });

        jProjectName.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jProjectName.setText("Project Name");

        txtProjectName.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtProjectName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProjectNameActionPerformed(evt);
            }
        });

        jContact.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jContact.setText("Contact");

        txtContact.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtContact.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtContactActionPerformed(evt);
            }
        });

        jEmai.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jEmai.setText("Email");

        txtEmail.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(txtFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jRegistrationID, javax.swing.GroupLayout.DEFAULT_SIZE, 220, Short.MAX_VALUE)
                            .addComponent(jName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtRegistrationID)
                            .addComponent(txtName)
                            .addComponent(jFaculty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(123, 123, 123)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEmail)
                            .addComponent(jProjectName, javax.swing.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
                            .addComponent(txtProjectName)
                            .addComponent(jContact, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtContact)
                            .addComponent(jEmai, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(blImageDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnImageUpload, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(blImageDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jRegistrationID)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtRegistrationID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jName)
                                    .addComponent(jContact))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(21, 21, 21))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jProjectName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtProjectName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addComponent(btnImageUpload)
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFaculty)
                    .addComponent(jEmai))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFaculty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50))
        );

        jPanel1.add(jPanel2);
        jPanel2.setBounds(10, 40, 740, 320);

        btnExit.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });
        jPanel1.add(btnExit);
        btnExit.setBounds(670, 380, 72, 22);

        btnRegister.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnRegister.setText("Register");
        btnRegister.setActionCommand("");
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });
        jPanel1.add(btnRegister);
        btnRegister.setBounds(10, 380, 74, 22);

        btnSearch.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jPanel1.add(btnSearch);
        btnSearch.setBounds(120, 380, 72, 22);

        btnUpdate.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });
        jPanel1.add(btnUpdate);
        btnUpdate.setBounds(230, 380, 72, 22);

        btnDelete.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        jPanel1.add(btnDelete);
        btnDelete.setBounds(440, 380, 72, 22);

        btnClear.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        jPanel1.add(btnClear);
        btnClear.setBounds(560, 380, 72, 22);

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\abiam\\Downloads\\bt.jpg")); // NOI18N
        jPanel1.add(jLabel1);
        jLabel1.setBounds(0, 0, 760, 420);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 758, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
                txtRegistrationID.setText("");
        txtName.setText("");
        txtFaculty.setText("");
        txtProjectName.setText("");
        txtContact.setText("");
        txtEmail.setText("");
        blImageDisplay.setIcon(null);
        blImageDisplay.setText("No Image Selected");
        currentImagePath = null;

    }//GEN-LAST:event_btnClearActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
       String registrationID = txtRegistrationID.getText().trim();
        if (registrationID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter Registration ID.");
            return;
        }
        String sql = "UPDATE Participants SET Name=?, Faculty=?, ProjectName=?, Contact=?, Email=?, [Project Image Path]=? WHERE [Registration ID]=?";
        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, txtName.getText().trim());
            pstmt.setString(2, txtFaculty.getText().trim());
            pstmt.setString(3, txtProjectName.getText().trim());
            pstmt.setString(4, txtContact.getText().trim());
            pstmt.setString(5, txtEmail.getText().trim());
            pstmt.setString(6, currentImagePath);
            pstmt.setString(7, registrationID);
            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Record updated successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "No record found to update.");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "SQL Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
                String registrationID = txtRegistrationID.getText().trim();
        if (registrationID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter Registration ID.");
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure to delete?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            String sql = "DELETE FROM Participants WHERE [Registration ID]=?";
            try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
                pstmt.setString(1, registrationID);
                int rows = pstmt.executeUpdate();
                if (rows > 0) {
                    JOptionPane.showMessageDialog(this, "Record deleted.");
                    clearAllFields();
                } else {
                    JOptionPane.showMessageDialog(this, "No record found.");
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "SQL Error: " + e.getMessage());
            }
        }

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
               String registrationID = txtRegistrationID.getText().trim();
        String name = txtName.getText().trim();
        String faculty = txtFaculty.getText().trim();
        String projectName = txtProjectName.getText().trim();
        String contact = txtContact.getText().trim();
        String email = txtEmail.getText().trim();

        if (registrationID.isEmpty() || name.isEmpty() || faculty.isEmpty() || projectName.isEmpty() || contact.isEmpty() || email.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Input Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        String sql = "INSERT INTO Participants ([Registration ID], Name, Faculty, ProjectName, Contact, Email, [Project Image Path]) VALUES (?, ?, ?, ?, ?, ?, ?)";

        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, registrationID);
            pstmt.setString(2, name);
            pstmt.setString(3, faculty);
            pstmt.setString(4, projectName);
            pstmt.setString(5, contact);
            pstmt.setString(6, email);
            pstmt.setString(7, currentImagePath);
            int rows = pstmt.executeUpdate();
            if (rows > 0) {
                JOptionPane.showMessageDialog(this, "Student registered successfully!");
                clearAllFields();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "SQL Error: " + e.getMessage());
        }

    }//GEN-LAST:event_btnRegisterActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
       String registrationID = txtRegistrationID.getText().trim();
        if (registrationID.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Enter Registration ID.");
            return;
        }
        String sql = "SELECT * FROM Participants WHERE [Registration ID] = ?";

        try (PreparedStatement pstmt = connection.prepareStatement(sql)) {
            pstmt.setString(1, registrationID);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    txtName.setText(rs.getString("Name"));
                    txtFaculty.setText(rs.getString("Faculty"));
                    txtProjectName.setText(rs.getString("ProjectName"));
                    txtContact.setText(rs.getString("Contact"));
                    txtEmail.setText(rs.getString("Email"));
                    currentImagePath = rs.getString("Project Image Path");
                    if (currentImagePath != null && !currentImagePath.isEmpty()) {
                        File imgFile = new File(currentImagePath);
                        if (imgFile.exists()) {
                            ImageIcon icon = new ImageIcon(currentImagePath);
                            Image image = icon.getImage().getScaledInstance(blImageDisplay.getWidth(), blImageDisplay.getHeight(), Image.SCALE_SMOOTH);
                            blImageDisplay.setIcon(new ImageIcon(image));
                            blImageDisplay.setText("");
                        } else {
                            blImageDisplay.setText("Image Not Found");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "No record found.");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "SQL Error: " + e.getMessage());
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
           int choice = JOptionPane.showConfirmDialog(this, "Are you sure you want to exit?", "Exit Confirmation", JOptionPane.YES_NO_OPTION);
    if (choice == JOptionPane.YES_OPTION) {
        System.exit(0);
    }
    }//GEN-LAST:event_btnExitActionPerformed

    private void txtRegistrationIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtRegistrationIDActionPerformed
        String registrationID = txtRegistrationID.getText();
    }//GEN-LAST:event_txtRegistrationIDActionPerformed

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNameActionPerformed
        String name = txtName.getText();
    }//GEN-LAST:event_txtNameActionPerformed

    private void txtFacultyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFacultyActionPerformed
        String faculty = txtFaculty.getText();
    }//GEN-LAST:event_txtFacultyActionPerformed

    private void txtProjectNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProjectNameActionPerformed
        String projectName = txtProjectName.getText();
    }//GEN-LAST:event_txtProjectNameActionPerformed

    private void txtContactActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtContactActionPerformed
       String contact = txtContact.getText();
    }//GEN-LAST:event_txtContactActionPerformed

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        String email = txtEmail.getText();
    }//GEN-LAST:event_txtEmailActionPerformed

    private void btnImageUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImageUploadActionPerformed
           JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Select Image File");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png", "gif", "bmp"));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            currentImagePath = file.getAbsolutePath();
           try {
    if (currentImagePath != null && !currentImagePath.isEmpty()) {
        ImageIcon icon = new ImageIcon(currentImagePath);
        Image image = icon.getImage().getScaledInstance(
            blImageDisplay.getWidth(),
            blImageDisplay.getHeight(),
            Image.SCALE_SMOOTH
        );
        blImageDisplay.setIcon(new ImageIcon(image));
        blImageDisplay.setText("");
    } else {
        blImageDisplay.setText("No Image Path");
    }
} catch (Exception e) {
    blImageDisplay.setText("Error Loading Image");
    currentImagePath = null;
}

        }
    }//GEN-LAST:event_btnImageUploadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ParticipantRegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ParticipantRegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ParticipantRegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ParticipantRegistrationForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ParticipantRegistrationForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel blImageDisplay;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnImageUpload;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jContact;
    private javax.swing.JLabel jEmai;
    private javax.swing.JLabel jFaculty;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jProjectName;
    private javax.swing.JLabel jRegistrationID;
    private javax.swing.JTextField txtContact;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFaculty;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtProjectName;
    private javax.swing.JTextField txtRegistrationID;
    // End of variables declaration//GEN-END:variables

    private void clearAllFields() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
